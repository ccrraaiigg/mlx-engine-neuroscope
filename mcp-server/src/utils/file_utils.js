import fs from 'fs';
import { getLogger } from './logging.js';

const logger = getLogger('file_utils');

/**
 * Makes a file read-only by setting appropriate permissions
 * @param {string} filePath - Path to the file to make read-only
 * @returns {Promise<boolean>} - True if successful, false otherwise
 */
export async function makeFileReadOnly(filePath) {
  try {
    // Set file permissions to read-only (444 = r--r--r--)
    await fs.promises.chmod(filePath, 0o444);
    logger.info(`File made read-only: ${filePath}`);
    return true;
  } catch (error) {
    logger.error(`Failed to make file read-only: ${filePath}`, error);
    return false;
  }
}

/**
 * Writes content to a file normally (without read-only protection)
 * @param {string} filePath - Path to the file to write
 * @param {string|Buffer} content - Content to write to the file
 * @param {object} options - Options for fs.writeFile
 * @returns {Promise<boolean>} - True if successful, false otherwise
 */
export async function writeFile(filePath, content, options = {}) {
  try {
    // If file exists and is read-only, make it writable first
    try {
      await fs.promises.access(filePath, fs.constants.F_OK);
      // File exists, make it writable
      await fs.promises.chmod(filePath, 0o644);
      logger.info(`Made existing file writable: ${filePath}`);
    } catch (accessError) {
      // File doesn't exist, that's fine
    }
    
    // Add auto-generation comment to content
    const contentWithComment = addAutoGenerationComment(filePath, content);
    
    // Write the file (but don't make it read-only)
    await fs.promises.writeFile(filePath, contentWithComment, options);
    logger.info(`File written with auto-generation comment: ${filePath}`);
    
    return true;
  } catch (error) {
    logger.error(`Failed to write file: ${filePath}`, error);
    return false;
  }
}

/**
 * Adds auto-generation comment to content based on file type
 * @param {string} filePath - Path to the file
 * @param {string|Buffer} content - Original content
 * @returns {string} - Content with auto-generation comment added
 */
function addAutoGenerationComment(filePath, content) {
  const ext = filePath.toLowerCase().split('.').pop();
  const timestamp = new Date().toISOString();
  
  const comments = {
    html: `<!-- 
  AUTO-GENERATED FILE - DO NOT EDIT
  This file was automatically generated by the MCP server.
  Generated at: ${timestamp}
  Any manual changes will be overwritten.
-->
`,
    js: `/*
 * AUTO-GENERATED FILE - DO NOT EDIT
 * This file was automatically generated by the MCP server.
 * Generated at: ${timestamp}
 * Any manual changes will be overwritten.
 */
`,
    json: ``,
    css: `/*
 * AUTO-GENERATED FILE - DO NOT EDIT
 * This file was automatically generated by the MCP server.
 * Generated at: ${timestamp}
 * Any manual changes will be overwritten.
 */
`,
    md: `<!-- 
  AUTO-GENERATED FILE - DO NOT EDIT
  This file was automatically generated by the MCP server.
  Generated at: ${timestamp}
  Any manual changes will be overwritten.
-->
`,
    py: `# AUTO-GENERATED FILE - DO NOT EDIT
# This file was automatically generated by the MCP server.
# Generated at: ${timestamp}
# Any manual changes will be overwritten.

`,
    st: `"AUTO-GENERATED FILE - DO NOT EDIT
This file was automatically generated by the MCP server.
Generated at: ${timestamp}
Any manual changes will be overwritten."

`
  };
  
  const comment = comments[ext] || `# AUTO-GENERATED FILE - DO NOT EDIT\n# Generated at: ${timestamp}\n\n`;
  
  // For JSON files, add comment as a special property
  if (ext === 'json') {
    try {
      const parsed = JSON.parse(content);
      parsed._auto_generated = {
        warning: "AUTO-GENERATED FILE - DO NOT EDIT",
        message: "This file was automatically generated by the MCP server. Any manual changes will be overwritten.",
        generated_at: timestamp
      };
      return JSON.stringify(parsed, null, 2);
    } catch (e) {
      // If not valid JSON, treat as text
      return comment + content;
    }
  }
  
  return comment + content;
}

/**
 * Writes content to a file and then makes it read-only
 * @param {string} filePath - Path to the file to write
 * @param {string|Buffer} content - Content to write to the file
 * @param {object} options - Options for fs.writeFile
 * @returns {Promise<boolean>} - True if successful, false otherwise
 */
export async function writeFileReadOnly(filePath, content, options = {}) {
  try {
    // If file exists and is read-only, make it writable first
    try {
      await fs.promises.access(filePath, fs.constants.F_OK);
      // File exists, make it writable
      await fs.promises.chmod(filePath, 0o644);
      logger.info(`Made existing file writable: ${filePath}`);
    } catch (accessError) {
      // File doesn't exist, that's fine
    }
    
    // Add auto-generation comment to content
    const contentWithComment = addAutoGenerationComment(filePath, content);
    
    // Write the file
    await fs.promises.writeFile(filePath, contentWithComment, options);
    logger.info(`File written with auto-generation comment: ${filePath}`);
    
    // Then make it read-only
    const readOnlySuccess = await makeFileReadOnly(filePath);
    
    return readOnlySuccess;
  } catch (error) {
    logger.error(`Failed to write file: ${filePath}`, error);
    return false;
  }
}

/**
 * Writes content to a file synchronously and then makes it read-only
 * @param {string} filePath - Path to the file to write
 * @param {string|Buffer} content - Content to write to the file
 * @param {object} options - Options for fs.writeFileSync
 * @returns {boolean} - True if successful, false otherwise
 */
export function writeFileReadOnlySync(filePath, content, options = {}) {
  try {
    // Add auto-generation comment to content
    const contentWithComment = addAutoGenerationComment(filePath, content);
    
    // Write the file first
    fs.writeFileSync(filePath, contentWithComment, options);
    logger.info(`File written (sync) with auto-generation comment: ${filePath}`);
    
    // Then make it read-only
    fs.chmodSync(filePath, 0o444);
    logger.info(`File made read-only (sync): ${filePath}`);
    
    return true;
  } catch (error) {
    logger.error(`Failed to write file (sync): ${filePath}`, error);
    return false;
  }
}